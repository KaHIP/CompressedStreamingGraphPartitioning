# automatically generated by the FlatBuffers compiler, do not modify

# namespace: StreamCPIInfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PartitionConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PartitionConfiguration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPartitionConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PartitionConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PartitionConfiguration
    def K(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # PartitionConfiguration
    def Seed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PartitionConfiguration
    def InputBalance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # PartitionConfiguration
    def SetPartZero(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PartitionConfiguration
    def RleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # PartitionConfiguration
    def Kappa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def PartitionConfigurationStart(builder):
    builder.StartObject(6)

def Start(builder):
    PartitionConfigurationStart(builder)

def PartitionConfigurationAddK(builder, k):
    builder.PrependUint32Slot(0, k, 0)

def AddK(builder, k):
    PartitionConfigurationAddK(builder, k)

def PartitionConfigurationAddSeed(builder, seed):
    builder.PrependInt32Slot(1, seed, 0)

def AddSeed(builder, seed):
    PartitionConfigurationAddSeed(builder, seed)

def PartitionConfigurationAddInputBalance(builder, inputBalance):
    builder.PrependFloat64Slot(2, inputBalance, 0.0)

def AddInputBalance(builder, inputBalance):
    PartitionConfigurationAddInputBalance(builder, inputBalance)

def PartitionConfigurationAddSetPartZero(builder, setPartZero):
    builder.PrependInt32Slot(3, setPartZero, 0)

def AddSetPartZero(builder, setPartZero):
    PartitionConfigurationAddSetPartZero(builder, setPartZero)

def PartitionConfigurationAddRleLength(builder, rleLength):
    builder.PrependUint64Slot(4, rleLength, 0)

def AddRleLength(builder, rleLength):
    PartitionConfigurationAddRleLength(builder, rleLength)

def PartitionConfigurationAddKappa(builder, kappa):
    builder.PrependFloat64Slot(5, kappa, 0.0)

def AddKappa(builder, kappa):
    PartitionConfigurationAddKappa(builder, kappa)

def PartitionConfigurationEnd(builder):
    return builder.EndObject()

def End(builder):
    return PartitionConfigurationEnd(builder)
